#!/bin/bash
# /etc/init.d/wow

### BEGIN INIT INFO
# Provides:   wow
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    World of Warcraft server
# Description:    Init script for World of Warcraft server, with rolling logs. 
### END INIT INFO

# Created by Floriusin

# Based on https://github.com/Ahtenus/minecraft-init


# Loads config file

if [ -L $0 ]
then
	source `readlink -e $0 | sed "s:[^/]*$:config:"`
else
	source `echo $0 | sed "s:[^/]*$:config:"`
fi

if [ "$SALT" == "" ]
then
	echo "Couldn't load config file, please edit config.example and rename it to config"
	logger -t wow-init-config "Couldn't load config file, please edit config.example and rename it to config"
	exit
fi


ME=`whoami`
as_user() {
	if [ $ME == $USERNAME ] ; then
		bash -c "$1"
	else
		su $USERNAME -s /bin/bash -c "$1"
	fi
}
is_running_worldserver(){
	# Checks for the world server screen session
	# returns true if it exists.
	if ps ax | grep -v grep | grep "$WORLDSCREEN $WORLDINVOCATION" > /dev/null
	then
		return 0
	fi
	return 1
}
is_running_authserver(){
	# Checks for the auth server screen session
	# returns true if it exists.
	if ps ax | grep -v grep | grep "$AUTHSCREEN $AUTHINVOCATION" > /dev/null
	then
		return 0
	fi
	return 1
}
datepath() {
	# datepath path filending-to-check returned-filending

	# Returns an file path with added date between the filename and file ending.
	# $1 filepath (not including file ending)
	# $2 file ending to check for uniqueness
	# $3 file ending to return

	if [ -e $1`date +%F`$2 ]
	then
		echo $1`date +%FT%T`$3
	else
		echo $1`date +%F`$3
	fi
}
world_start() {
	cd $WOWPATH
	as_user "cd $WOWPATH && screen -dmS $WORLDSCREEN $WORLDINVOCATION"
	#
	# Waiting for the server to start
	#
	seconds=5
	until ps ax | grep -v grep | grep "$WORLDSCREEN $WORLDINVOCATION" > /dev/null
	do
		sleep 1
		seconds=$seconds+1
		if [[ $seconds -eq 5 ]]
		then
			echo "Still not running, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			echo "Worldserver Failed to start, aborting.    \033[0;31m[ FAIL ]"
			exit 1
		fi
	done	
	echo "Worldserver is running.                 \033[0;32m[  OK  ]"
}
auth_start() {
	cd $WOWPATH
	as_user "cd $WOWPATH && screen -dmS $AUTHSCREEN $AUTHINVOCATION"
	#
	# Waiting for the server to start
	#
	seconds=5
	until ps ax | grep -v grep | grep "$AUTHSCREEN $AUTHINVOCATION" > /dev/null
	do
		sleep 1
		seconds=$seconds+1
		if [[ $seconds -eq 5 ]]
		then
			echo "Still not running, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			echo "Authserver failed to start, aborting.     \033[0;31m[ FAIL ]"
			exit 1
		fi
	done	
	echo "Authserver is running.                 \033[0;32m[  OK  ]"
}
auth_stop() {
	as_user "screen -p 0 -S $AUTHSCREEN -X eval 'stuff \"^C\"\015'"
	sleep 0.5
	#
	# Waiting for the server to shut down
	#
	seconds=0
	while ps ax | grep -v grep | grep "$AUTHSCREEN $AUTHINVOCATION" > /dev/null
	do
		sleep 1 
		seconds=$seconds+1
		if [[ $seconds -eq 5 ]]
		then
			echo "Still not shut down, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			logger -t wow-init-auth "Failed to shut down server, aborting."
			echo "Authserver failed to start, aborting.     \033[0;31m[ FAIL ]"
			exit 1
		fi
	done	
	echo "Authserver is now shut down.   \033[0;32m[  OK  ]"
}
world_stop() {
	as_user "screen -p 0 -S $WORLDSCREEN -X eval 'stuff \"^C\"\015'"
	sleep 0.5
	#
	# Waiting for the server to shut down
	#
	seconds=0
	while ps ax | grep -v grep | grep "$WORLDSCREEN $WORLDINVOCATION" > /dev/null
	do
		sleep 1 
		seconds=$seconds+1
		if [[ $seconds -eq 5 ]]
		then
			echo "Still not shut down, waiting a while longer..."
		fi
		if [[ $seconds -ge 120 ]]
		then
			logger -t wow-init-world "Failed to shut down server, aborting."
			echo "Worldserver failed to start, aborting.    \033[0;31m[ FAIL ]"
			exit 1
		fi
	done	
	echo "Worldserver is now shut down.  \033[0;32m[  OK  ]"
}
log_roll() {
        if [ ! -d $OLDLOGPATH ]; then
                as_user "mkdir -p $LOGPATH"
        fi
        path=`datepath $OLDLOGPATH/server_ .log.gz .log`
        as_user "cp $LOGPATH/*.* $path && gzip $path"
	# only if previous command was successful
        if [ $? -eq 0 ]; then
                # turnacate the existing log without restarting server
                as_user "cp /dev/null $LOGPATH/$AUTHLOGFILE"
                as_user "cp /dev/null $LOGPATH/$AUTHSQLDRIVERLOGFILE"
                as_user "cp /dev/null $LOGPATH/$SERVERLOGFILE"                
                as_user "cp /dev/null $LOGPATH/$WORLDLOGFILE"
                as_user "cp /dev/null $LOGPATH/$DBERRORLOGFILE"
                as_user "cp /dev/null $LOGPATH/$CHARLOGFILE"
                as_user "cp /dev/null $LOGPATH/$GMLOGFILE"
                as_user "cp /dev/null $LOGPATH/$RALOGFILE"
                as_user "cp /dev/null $LOGPATH/$ARENALOGFILE"
                as_user "cp /dev/null $LOGPATH/$SQLDEVELOPERLOFFILE"
                as_user "cp /dev/null $LOGPATH/$SQLDRIVERLOGFILE"
                as_user "cp /dev/null $LOGPATH/$CHATLOGFILE"
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$AUTHLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$AUTHSQLDRIVERLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$SERVERLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$WORLDLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$DBERRORLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$CHARLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$GMLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$RALOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$ARENALOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$SQLDEVELOPERLOFFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$SQLDRIVERLOGFILE "
                as_user "echo \"Previous logs rolled to $path\" > $LOGPATH/$CHATLOGFILE "
                echo "Logs are roled.                \033[0;32m[  OK  ]"              
        else    
                echo "Failed to rotate logs to $OLDLOGPATH/server_$path.log.gz    \033[0;31m[ FAIL ]"
        fi

}
case "$1" in
	start)
		# Starts the server
    if is_running_authserver; then
			echo "Authserver already running.              \033[0;31m[ FAIL ]"
		else
			auth_start
		fi
		if is_running_worldserver; then
			echo "Worldserver already running.             \033[0;31m[ FAIL ]"
		else
			world_start
		fi
		;;
	stop)
		# Stops the server
		if is_running_auth; then
			as_user "screen -p 0 -S $WORLDSCREEN -X eval 'stuff \"announce SERVER IS GOING TO SHUT DOWN\"\015'"
			auth_stop
		else
			echo "Auth server is not running.              \033[0;31m[ FAIL ]"
		fi    
		if is_running_world; then
			world_stop
		else
			echo "World server is not running.             \033[0;31m[ FAIL ]"
		fi
		;;
	restart)
		# Restarts the server
		if is_running_authserver; then
			as_user "screen -p 0 -S $WORLDSCREEN -X eval 'stuff \"announce SERVER REBOOT IN 10 SECONDS!\"\015'"
			auth_stop
		else
			echo "Auth server is not running.              \033[0;31m[ FAIL ]"
		fi
		if is_running_worldserver; then
			world_stop
		else
			echo "World server is not running.             \033[0;31m[ FAIL ]"
		fi    
		world_start
    		sleep 60
    		auth_start
		;;
	announce)
		# Says something to the ingame chat
		if is_running_worldserver; then
			as_user "screen -p 0 -S $WORLDSCREEN -X eval 'stuff \"announce $2\"\015'"
		else
			echo "World server is not running to announce.  \033[0;31m[ FAIL ]"
		fi
		;;
	log-roll)
		# Moves and Gzips the logfile
		log_roll
		;;
	status)
		# Shows server status
		if is_running_worldserver
		then
			echo "World server is running.                  \033[0;32m[  ON  ]"
		else
			echo "World server is not running.              \033[0;31m[  OFF ]"
		fi
    		if is_running_worldserver
		then
			echo "Auth server is running.                   \033[0;32m[  ON  ]"
		else
			echo "Auth server is not running.               \033[0;31m[  OFF ]"
		fi
		;;
	version)
		if is_running; then
			tac $LOGPATH/server.log | grep -m 1 "This server is running"
		else
			echo "The server needs to be running to check version."
		fi
		;;
	help|--help|-h)
		echo "Usage: $0 COMMAND"
		echo 
		echo "Available commands:"
		echo -e "   start \t\t Starts the server"
		echo -e "   stop \t\t Stops the server"
		echo -e "   restart \t\t Restarts the server"
		echo -e "   log-roll \t\t Moves and gzips the logfile"
		echo -e "   announce \t\t\t Prints the given string to the ingame chat."
		echo -e "   status \t\t Displays server status"
		echo -e "   version \t\t Displays Trinity Core version and then exits"
		;;
	*)
		echo "Usage: wow {start|stop|restart|status|version|log-roll|announce|help}"
		exit 1
		;;
esac

exit 0